#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üì¶ Inlining SVG assets into code.js...');

try {
    // Read all SVG asset files first
    const assetsDir = path.join(__dirname, 'assets');
    const svgAssets = {};
    
    // Read each iPhone model SVG file
    const models = ['iphone-14-pro', 'iphone-14', 'iphone-se'];
    
    for (const model of models) {
        const svgFilePath = path.join(assetsDir, `${model}-frame.svg`);
        if (fs.existsSync(svgFilePath)) {
            const svgContent = fs.readFileSync(svgFilePath, 'utf8').trim();
            svgAssets[model] = svgContent;
            console.log(`‚úÖ Loaded ${model}-frame.svg`);
        } else {
            console.warn(`‚ö†Ô∏è  SVG asset not found: ${svgFilePath}`);
        }
    }
    
    // Create the replacement code with actual SVG content
    const assetObject = Object.entries(svgAssets)
        .map(([key, svg]) => `            '${key}': '${svg.replace(/'/g, "\\'")}'`)
        .join(',\n');
    
    // Process both JavaScript and TypeScript files
    const files = [
        { path: path.join(__dirname, 'code.js'), type: 'js' },
        { path: path.join(__dirname, 'code.ts'), type: 'ts' }
    ];
    
    const processedFiles = [];
    
    for (const file of files) {
        if (!fs.existsSync(file.path)) {
            console.warn(`‚ö†Ô∏è  File not found: ${file.path}`);
            continue;
        }
        
        console.log(`üìù Processing ${file.type.toUpperCase()} file: ${path.basename(file.path)}`);
        let codeContent = fs.readFileSync(file.path, 'utf8');
        
        // TypeScript version needs type annotation
        const typeAnnotation = file.type === 'ts' ? '(modelKey: iPhoneModelKey): Promise<string> ' : '(modelKey) ';
        
        const replacementCode = `// iPhone frame SVG data - loaded from actual asset files during build
// This content is automatically generated by the build process from assets/*.svg files
async function loadiPhoneFrameSVG${typeAnnotation}{
    // SVG content inlined from actual asset files during build process
    const svgAssets = {
${assetObject}
    };
    
    const svgContent = svgAssets[modelKey];
    if (!svgContent) {
        throw new Error(\`No SVG asset found for model: \${modelKey}\`);
    }
    
    return svgContent;
}`;

        // Find the function definition and replace it
        const functionRegex = /\/\/ iPhone frame SVG data[\s\S]*?^}/m;
        
        if (functionRegex.test(codeContent)) {
            codeContent = codeContent.replace(functionRegex, replacementCode);
            console.log(`‚úÖ Successfully replaced loadiPhoneFrameSVG function in ${file.type.toUpperCase()}`);
        } else {
            console.error(`‚ùå Could not find loadiPhoneFrameSVG function to replace in ${file.type.toUpperCase()}`);
            continue;
        }
        
        // Write the updated code back to the file
        fs.writeFileSync(file.path, codeContent);
        processedFiles.push(file.type.toUpperCase());
    }
    
    console.log('‚úÖ Asset inlining completed successfully!');
    console.log(`üìÅ Updated files: ${processedFiles.join(', ')}`);
    console.log('üìÅ Inlined SVG assets from:');
    Object.keys(svgAssets).forEach(model => {
        console.log(`   - assets/${model}-frame.svg`);
    });
    
} catch (error) {
    console.error('‚ùå Asset inlining failed:', error.message);
    process.exit(1);
}